<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://jolson88.com/feed.xml" rel="self" type="application/atom+xml" /><link href="http://jolson88.com/" rel="alternate" type="text/html" /><updated>2018-04-05T20:00:57-07:00</updated><id>http://jolson88.com/</id><title type="html">Jason Olson</title><subtitle>Developer | Musician | Father</subtitle><entry><title type="html">Taking back my attention</title><link href="http://jolson88.com/personal/2018/04/05/taking-back-my-attention.html" rel="alternate" type="text/html" title="Taking back my attention" /><published>2018-04-05T00:00:00-07:00</published><updated>2018-04-05T00:00:00-07:00</updated><id>http://jolson88.com/personal/2018/04/05/taking-back-my-attention</id><content type="html" xml:base="http://jolson88.com/personal/2018/04/05/taking-back-my-attention.html">&lt;p&gt;Some people have told me I’m crazy. Recently, I’ve deleted my account on Facebook, uninstalled all games from my phone, turned off all notifications on both my phone and desktop, only have two/three apps on my home screen, have no email on my phone, leave my phone in “Black and White” accessibility mode, have my phone on vibrate all day, don’t take my phone into meetings (and preferable no laptop either), and never take my laptop into my bedroom.&lt;/p&gt;

&lt;p&gt;Why? Because I’m determined to take back my attention and live my life with intention and purpose.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“…in an information-rich world, the wealth of information means a dearth of something else: a scarcity of whatever it is that information consumes. What information consumes is rather obvious: it consumes the attention of its recipients. Hence a wealth of information creates a poverty of attention and a need to allocate that attention efficiently among the overabundance of information sources that might consume it”&lt;/p&gt;

  &lt;p&gt;Herbert A. Simon&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;whats-the-deal&quot;&gt;What’s the deal?&lt;/h1&gt;
&lt;p&gt;I was first exposed to the idea of “attention as a scarce commodity” in a couple of ways. First was my experience as a software developer. I would be happily coding away and then get interrupted (a text, a coworker asking a question, a phone call, etc.). It would take me quite a bit of take to focus back on the task at hand. Am I just imagining it? Turns out not.&lt;/p&gt;

&lt;p&gt;According to &lt;a href=&quot;https://www.ics.uci.edu/~gmark/chi08-mark.pdf&quot;&gt;research by Gloria Mark&lt;/a&gt;, it takes up to 23 minutes and 15 seconds to return to a task after an interruption. If you are getting interrupted several times a day, that’s a huge cost to pay when you are trying to get stuff done. Not only did I feel like I was accomplishing less, I felt less satisfied with the work I did get done, and I felt stressed out because I never seemed to be getting enough done. It felt like I never had enough hours in the day.&lt;/p&gt;

&lt;p&gt;My next exposure to “attention as a scarce commodity” was the work of Tristan Harris and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Time_Well_Spent&quot;&gt;Time Well Spent&lt;/a&gt; movement. I read Tristan’s Huffington Post article &lt;a href=&quot;https://www.huffingtonpost.com/tristan-harris/how-technology-hijacks-peoples-minds_b_10155754.html&quot;&gt;“How Technology Hijacks People’s Minds”&lt;/a&gt; last year but only took a single baby step myself. Then I watched a TED Talk that Tristan gave called &lt;a href=&quot;https://www.ted.com/talks/tristan_harris_the_manipulative_tricks_tech_companies_use_to_capture_your_attention&quot;&gt;“How a handful of tech companies control billions of minds every day.”&lt;/a&gt; Again though, I didn’t take action. It may have been depression, or it may have been that I didn’t truly understand the negative impact this technology was having on my quality of life.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Time Well Spent&lt;/strong&gt; is an nonprofit organization which seeks to reverse what they call the “digital attention crisis”, caused by technology companies designing mobile devices and social media features in order to capture as much attention as possible, regardless of their impact on users’ quality of life.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s a common belief that better technology enables us to be more productive because we get to focus on the things that are important and to automated the things that are not.
Sadly, that has not turned out to be true. All the technology we have integrated intimately into our daily lives have made us less efficient in many ways and prevented us from focusing on the things that truly matters.&lt;/p&gt;

&lt;p&gt;How? Because all this “latest and greatest” technology is competing for a single thing: our attention.&lt;/p&gt;

&lt;h1 id=&quot;the-attention-economy&quot;&gt;The Attention Economy&lt;/h1&gt;
&lt;p&gt;As Wikipedia &lt;a href=&quot;https://en.wikipedia.org/wiki/Attention_economy&quot;&gt;defines it&lt;/a&gt;: “Attention economics is an approach to the management of information that treats human attention as a scarce commodity, and applies economic theory to solve various information management problems. Put simply by Matthew Crawford, ‘Attention is a resource—a person has only so much of it.’”&lt;/p&gt;

&lt;p&gt;We are surrounded by more and more information every single day. Our attention is the limiting factor in the consumption of this information. Companies want to sell us the latest game, the latest self-care product, the “you won’t believe this one trick that this suburban man has used; big pharma hates her” article.&lt;/p&gt;

&lt;p&gt;Through aggressive use of notifications, text messages, emails, and other tricks of the trade, our attention gets hijacked. Frankly, I’ve grown tired of it.&lt;/p&gt;

&lt;h1 id=&quot;what-kind-of-life-do-i-want-to-live&quot;&gt;What kind of life do I want to live?&lt;/h1&gt;
&lt;p&gt;I started noticing commonalities amongst the people I looked up to most. They read… a LOT. Their reading habits were more focused on longer form works: books and academic papers. Their interests were diverse. It wasn’t just a focus on technology. They loved everything from Molecular Biology, to Psychology and Social Sciences, to Philosophy, to Astronomy or Physics.&lt;/p&gt;

&lt;p&gt;They focus on social connections. Spending more time with friends and family. Playing games with friends and family. Having deep conversations about their interests with others.&lt;/p&gt;

&lt;p&gt;They use these life experiences and knowledge to connect dots that exist between all of their interests. They formulate insights that are cultivated from this diverse collection of passions.&lt;/p&gt;

&lt;p&gt;So I recently decided there are some things in my life that are important to me that I need to spend more time doing: reading books, listening to music, playing games with the wife and kids, and talking with the wife about our hopes, dreams, and life wishes.&lt;/p&gt;

&lt;p&gt;To spend more time with the things that actually mean the most to me, I had to admit one thing to myself: I had developed a technology addiction and was letting technology interrupt my life and keep me distracted. I let days, weeks, and years pass simply wishing there were more hours in the day. Though I felt certain things were important, my actions spoke differently.&lt;/p&gt;

&lt;p&gt;In this light, I’ve embraced a new principle in my life: I decide when to check my phone, I decide when to check my email, I decide when to check Twitter. I believe that a phone, a website, or an app does &lt;strong&gt;not&lt;/strong&gt; get to make that decision for me.&lt;/p&gt;

&lt;p&gt;Notifications and having my attention hijacked interferes with these things I hold most dear. So, I’ve deleted my account on Facebook, uninstalled all games from my phone, turned off all notifications on both my phone and desktop, only have two/three apps on my home screen, have no email on my phone, leave my phone in “Black and White” accessibility mode, have my phone on vibrate all day, don’t take my phone into meetings (and preferable no laptop either), and I (almost) never take my laptop into my bedroom.&lt;/p&gt;

&lt;h1 id=&quot;do-you-want-to-try-it-out&quot;&gt;Do you want to try it out?&lt;/h1&gt;
&lt;p&gt;Are you interested in taking steps along this path? Do you want to prevent &lt;a href=&quot;https://www.psychologytoday.com/us/blog/rest/201507/notifications-are-the-new-distractions&quot;&gt;notifications from being distractions&lt;/a&gt; in your life? The &lt;a href=&quot;http://humanetech.com/&quot;&gt;Center for Humane Technology&lt;/a&gt; has a great &lt;a href=&quot;http://humanetech.com/take-control/&quot;&gt;Take Control&lt;/a&gt; page that will help you with small steps you can take to get started.&lt;/p&gt;

&lt;p&gt;I know this has made a hugely positive impact in my life in just a couple of weeks and I never want to go back. I’d encourage others to at least give it a try. Take back your life, focus on the things that matter most to you.&lt;/p&gt;</content><author><name></name></author><summary type="html">Some people have told me I’m crazy. Recently, I’ve deleted my account on Facebook, uninstalled all games from my phone, turned off all notifications on both my phone and desktop, only have two/three apps on my home screen, have no email on my phone, leave my phone in “Black and White” accessibility mode, have my phone on vibrate all day, don’t take my phone into meetings (and preferable no laptop either), and never take my laptop into my bedroom.</summary></entry><entry><title type="html">Agile Lost: devs as cogs in a wheel</title><link href="http://jolson88.com/leadership/2018/04/02/agile-lost-devs-as-cogs-in-a-wheel.html" rel="alternate" type="text/html" title="Agile Lost: devs as cogs in a wheel" /><published>2018-04-02T00:00:00-07:00</published><updated>2018-04-02T00:00:00-07:00</updated><id>http://jolson88.com/leadership/2018/04/02/agile-lost-devs-as-cogs-in-a-wheel</id><content type="html" xml:base="http://jolson88.com/leadership/2018/04/02/agile-lost-devs-as-cogs-in-a-wheel.html">&lt;blockquote&gt;
  &lt;p&gt;Multipliers extract all the capability from people… We were amazed to find that Multipliers got 1.97 times more. That represents an almost twofold increase - a 2x effect… Multipliers get at least two times more from people.&lt;/p&gt;

  &lt;p&gt;Liz Wiseman, “Multipliers”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lately, I’ve been reading Liz Wiseman’s excellent book &lt;a href=&quot;https://www.amazon.com/Multipliers-Revised-Updated-Leaders-Everyone/dp/0062663070/ref=sr_1_1?ie=UTF8&amp;amp;qid=1522601563&amp;amp;sr=8-1&amp;amp;keywords=multipliers&quot;&gt;Multipliers&lt;/a&gt;. This has me reflecting on the great people I work with at work. Specifically, I’m thinking about the unique strengths and passions each developer brings to a team and how I can challenge each one to be most effective in their job. In Liz’s words, I want to be a Multiplier. I want to make other people better.&lt;/p&gt;

&lt;p&gt;One common thread (of many) that I’m noticing in the book is that Multipliers seek to understand the unique strengths and genius that each person has. Each person is a “native genius” at something. It is our job to find what that is and to put them in a position to apply and grow those unique strengths.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Some minds excel at quantitative analysis or verbal reasoning… Other minds offer creative genius, innovating through fresh thinking and bold ideas. Some minds are critical, spotting every problem or landmine lurking within a plan; the genius of some others is to find a way to tunnel around these landmines.&lt;/p&gt;

  &lt;p&gt;Liz Wiseman, “Multipliers”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At the same time, I’ve been forcing myself to look at our agile development processes with fresh eyes through a critical lens. I’ve been thinking about the original intentions of the Agile Software movement and the implementation of Scrum that many teams are using these days. I’m questioning processes that I’ve simply thought of as givens before.&lt;/p&gt;

&lt;p&gt;I’ve grown concerned that many implementations of Scrum are processes that are actually Accidental Diminishers (e.g. people or processes that mean the best but whose behavior actually stifles the genius inherent in others). How? Devs are sadly often treated as interchangeable cogs in a wheel.&lt;/p&gt;

&lt;p&gt;We have a shared backlog, shared ownership of an entire project, knowledge sharing, pair programming, etc. We drive ourselves to prevent the dreaded “hit by a bus” scenario. We also strive for minimizing risk and providing predictability to the execution of the project.&lt;/p&gt;

&lt;p&gt;We setup a backlog like a line of dominoes. We suck in the top items from the backlog when planning the next sprint, no matter what developers are available or not. We have developers simply grab the next item off the top of the backlog when they finish up their previous task and no open stories remain in the sprint. Anybody should be able to pick up any part of the project if somebody else is sick or on vacation. Though we don’t realize it, we are effectively treating developers as interchangeable parts.&lt;/p&gt;

&lt;p&gt;If software development were as simple as a zero-sum game balancing resources (e.g. people) with tasks to be done, that would be fine. But the world doesn’t work this way. And it certainly doesn’t encourage people to grow their own unique strengths and to discover the best way they can make the team or company better.&lt;/p&gt;

&lt;h1 id=&quot;people-are-individuals&quot;&gt;People are individuals&lt;/h1&gt;
&lt;p&gt;Different people have different strengths. Different people have different passions and interests. We should strive to bring out the best in people and finding the problems they are uniquely positioned to solve. Devs shouldn’t be forced into a cookie cutter mold where we consider them all of equal strengths, equal knowledge, equal skills.&lt;/p&gt;

&lt;p&gt;One person may have a strong passion around Data Science and be uniquely creative in thinking of ways the business could use the data we have access to. It is a disservice to that person to have them do infrastructure automation simply because it’s the next item on the team’s backlog. How will that improve the person’s career or encourage them to use all the intelligence they are capable of using?&lt;/p&gt;

&lt;p&gt;Another person might really love DevOps, automating everything about a system, and monitoring it while it’s running in production; bringing structure and repeatability to chaos. Should we really put that person to work on researching a detailed bug about a subtlety arising from unicode text inclusion in an image generation process simply because it’s the next task on the team’s backlog? How does that encourage the person to be their best self at work?&lt;/p&gt;

&lt;p&gt;By having the team adhere to the whims of the Almighty Backlog, I’m concerned we are not doing people a favor. It’s fine to have a common goal or product that we are aiming to ship. That’s healthy. But team members should have shared ownership of the backlog. Team members should feel comfortable tackling tasks that fit into their strengths rather than constantly “taking one for the team.” That’s not a way to be passionate about the work you do.&lt;/p&gt;

&lt;p&gt;The Real World is not clean and organized, it’s dirty and filled with complexities. To get the most out of people, we need to constantly think about what their strengths are and how we can encourage them to be doing their best work and stretching their capabilities. How can we best bring a person’s intelligence to bear on a problem? I think that sometimes that may mean finding “lower priority” tasks in the backlog that people are uniquely positioned to knock out of the park. If we don’t do this, I think we are not doing what’s best for our team or the company.&lt;/p&gt;

&lt;h1 id=&quot;the-agile-manifesto&quot;&gt;The Agile Manifesto&lt;/h1&gt;
&lt;p&gt;But is the desire to get the best from people actually in contradiction to the true intentions of Agile?&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://agilemanifesto.org/&quot;&gt;Agile Manifesto&lt;/a&gt; highlights four key areas of value:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Individuals and interactions&lt;/strong&gt; over processes and tools&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Working software&lt;/strong&gt; over comprehensive documentation&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Customer collaboration&lt;/strong&gt; over contract negotiation&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Responding to change&lt;/strong&gt; over following a plan&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I don’t see anything that would contradict the Agile Manifesto. In fact, key area #1 seems to emphasize that we should not be a slave to the process. We &lt;strong&gt;should&lt;/strong&gt; be focusing on our individuals and interactions more than the processes and tools we use to help the team.&lt;/p&gt;

&lt;p&gt;I think that pulling in different tasks from the backlog for different people dependant on their strengths actually empowers teams to better develop and deliver &lt;em&gt;working software&lt;/em&gt;. By leveraging these unique strengths and getting more out of each person on the team, the team is going to be more productive and allow us to &lt;em&gt;respond to change&lt;/em&gt; even quicker than we could otherwise do.&lt;/p&gt;

&lt;p&gt;Sadly, this is not how I’ve seen Scrum or other Agile processes used in many companies. Very little thought ends up being given to the individual. Backlogs become a strictly defined list of “marching orders.” Developers are told to simply grab the next item off the backlog when they finish up a task. It’s not uncommon to see a manager and product owner figure out how a story should be done and then break it down into tasks in the backlog. Individual developers are rarely given larger initiatives or projects to drive that are larger in scope than a handful of stories.&lt;/p&gt;

&lt;p&gt;Pair programming and knowledge sharing is encouraged so that the knowledge is spread across the team and different developers can “rotate in” to different parts of the system as-needed. Stand-ups turn into “task brain-dump” status reports where people simply share what they’ve been doing.&lt;/p&gt;

&lt;p&gt;The unfortunate underlying message that can be sent through most of these practices is that we want devs to be interchangeable. We may not mean to send that message, but we do anyways. Feeling interchangeable really sucks the joy out of work. You fail to see your unique strengths. You are not given the encouragement or latitude to build up your unique strengths and snowball those successes into a larger career path.&lt;/p&gt;

&lt;h1 id=&quot;it-doesnt-need-to-be-this-way&quot;&gt;It doesn’t need to be this way&lt;/h1&gt;
&lt;p&gt;We need to encourage each other and help each other discover our strengths. The skills that come to us naturally are skills we often take for granted and can’t see our strength in. As the saying goes, “the fish is the last one to discover water.”&lt;/p&gt;

&lt;p&gt;The backlog should take into account the strengths of the team and how to maximize the productivity on the team to help us ship software quicker.&lt;/p&gt;

&lt;p&gt;Pair programming should augment the skills of both programmers involved. This can be especially powerful when the weaknesses of one programmer are offset by the strengths of the other programmer.&lt;/p&gt;

&lt;p&gt;We need to remember that Agile processes are here to serve us, not the other way around. A process should be serving the best interests of the team. It exists to help make a team better.&lt;/p&gt;

&lt;p&gt;We’ve lost our way when we’ve made the team subservient to the process itself. Sadly, that has become all too prevalent today in the age of selling (big s) Scrum into business cultures as a silver bullet.&lt;/p&gt;

&lt;h1 id=&quot;have-you-seen-or-experienced-this&quot;&gt;Have you seen or experienced this?&lt;/h1&gt;
&lt;p&gt;What has been your experience using Scrum or other Agile methodologies? If you are a developer using Scrum at work, do you feel like the process allows you to leverage your unique strengths and encourage you to use all your intelligence? Do you feel fully present at work?&lt;/p&gt;</content><author><name></name></author><summary type="html">Multipliers extract all the capability from people… We were amazed to find that Multipliers got 1.97 times more. That represents an almost twofold increase - a 2x effect… Multipliers get at least two times more from people. Liz Wiseman, “Multipliers”</summary></entry><entry><title type="html">Goodbye, Facebook</title><link href="http://jolson88.com/personal/2018/03/24/goodbye-facebook.html" rel="alternate" type="text/html" title="Goodbye, Facebook" /><published>2018-03-24T00:00:00-07:00</published><updated>2018-03-24T00:00:00-07:00</updated><id>http://jolson88.com/personal/2018/03/24/goodbye-facebook</id><content type="html" xml:base="http://jolson88.com/personal/2018/03/24/goodbye-facebook.html">&lt;blockquote&gt;
  &lt;p&gt;“Our inventions are wont to be pretty toys, which distract our attention from serious things. They are but improved means to an unimproved end, an end which it was already but too easy to arrive at…”&lt;/p&gt;

  &lt;p&gt;Henry David Thoreau&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It seems everywhere you turn today, there is bad news, resentment, and festering anger. We see more stories about “The Others.” People with different political beliefs, people with different religious beliefs, people with different sociological beliefs than us. We get infuriated. We don’t understand The Others. “They are ruining the world,” we think. “Why can’t they see how wrong they are?”&lt;/p&gt;

&lt;p&gt;At the same time, the data that are the digital echoes of our daily rituals are being spread to the ends of our online world. The digital ripples left behind from the wake of our beliefs and social constructs are being harvested and monetized as part of a new Gold Rush for 21st century corporations. Our energy and outrage is lining the pockets of the plutocrats. We are being sold. We are the product. We are digital chattel.&lt;/p&gt;

&lt;p&gt;So I’m finally doing it. After many years and many interactions, I am deleting my Facebook account. You are probably seeing several other people doing the same in the light of recent news (e.g. &lt;a href=&quot;https://www.cbsnews.com/news/facebook-cambridge-analytica-restore-public-trust-after-privacy-scandal/&quot;&gt;tens of millions of accounts having data stolen from Facebook by Cambridge Analytica&lt;/a&gt;, &lt;a href=&quot;https://newrepublic.com/article/147486/facebook-genocide-problem&quot;&gt;Facebook possibly contributing to genocide&lt;/a&gt;). Initially I had the same reaction. Instead, I removed much of my personal information from my profile, deleted photos, trimmed my friends list, cleared my ad preferences, opted out of 3rd party ad platform, removed linked apps, changed my name, and other actions. But it wasn’t enough, something happened. I was exposed to the work of Marshall McLuhan.&lt;/p&gt;

&lt;h1 id=&quot;the-medium-is-the-message&quot;&gt;The medium is the message&lt;/h1&gt;
&lt;p&gt;In 1964, Marshall McLuhan published his book “&lt;a href=&quot;https://www.amazon.com/Understanding-Media-Extensions-Marshall-McLuhan/dp/0262631598/ref=sr_1_1?ie=UTF8&amp;amp;qid=1521950146&amp;amp;sr=8-1&amp;amp;keywords=understanding+media+the+extensions+of+man&quot;&gt;Understanding Media: The Extensions of Man&lt;/a&gt;.” This book is a quite prescient take on the consequences of any medium. McLuhan proposed that it is not the content carried by a medium that is important. The personal and social consequences are shaped by the medium itself. These consequences “result from the new scale that is introduced into our affairs by each extension of ourselves, or by any new technology.”&lt;/p&gt;

&lt;p&gt;Facebook, as a medium, has a couple of characteristics that are disconcerting when it comes to how information flows through society.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The information we are exposed to is self-selected from our own circle of friends&lt;/em&gt;. We tend to gravitate towards those that share our own world view, those that we have much in common with. Our default behavior on Facebook is to live within an echo chamber where like-minded thoughts are amplified and reverberate throughout our social network.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Facebook also promotes a culture of communication that is devoid of context and subtlety&lt;/em&gt;. Every status update and notification competes for our limited attention span. There is a quest to maximize user engagement: the strive for more likes, shares, and comments. Sensational news headlines, pithy quotes, the latest “what TV show character are you?” quiz. We live in a world of instant gratification and a quest for the next hit of Dopamine.&lt;/p&gt;

&lt;p&gt;On the other hand, &lt;em&gt;Facebook has added benefits of drastically reducing the time and effort it takes to stay in contact with loved ones&lt;/em&gt;. We can more easily schedule time to get together with others that are geographically separated. We can stay in contact with friends that are no longer feasible to see in person. We get to see and hear about their day. We get to hear about their joy, and their pain. It has the possibility of bringing us closer together. But…&lt;/p&gt;

&lt;h1 id=&quot;a-cost-im-not-willing-to-pay&quot;&gt;A cost I’m not willing to pay&lt;/h1&gt;
&lt;p&gt;For Facebook to exist, there is a cost. It takes money to run a business, to run servers, to maintain the code that the medium is built upon. Historically, we have directly traded goods or paid money in exchange for services. But Facebook operates on a model where the users no longer front the cost. The funding has shifted. We the users subsidize the cost by becoming the product that is sold. All our interactions, all our data; it’s liquid gold for those wanting to sell products or services.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;TANSTAAFL&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;There Ain’t No Such Thing As A Free Lunch&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What sells most? &lt;a href=&quot;http://brainworldmagazine.com/fear-sells-business-panic-paranoia/&quot;&gt;Fear sells&lt;/a&gt;. At its core, Facebook is a medium defined and driven by Fear. Fear is what drives Facebook’s continued success. We can spread love until the cows come home on Facebook, but it won’t make a difference in the long run. It’s not the content, it’s the medium. We have to get out into the world and get our hands dirty.&lt;/p&gt;

&lt;p&gt;I refuse to continue to be a participant on a medium that actively betrays the very principles that I believe in. I refuse to be the product. I refuse to be bullied into closing myself off from others. My life will not be driven by fear.&lt;/p&gt;

&lt;h1 id=&quot;goodbye-facebook&quot;&gt;Goodbye, Facebook&lt;/h1&gt;
&lt;p&gt;I choose compassion. I choose empathy. I choose listening and understanding. I choose deeper connections. I choose books and blog posts. I choose deeper thought and rational debate. I choose to pay directly for the services that augment my life. I choose not to live surrounded by a daily digest of Pithy Slogans and Fear, Uncertainty, and Doubt.&lt;/p&gt;

&lt;p&gt;Goodbye, Facebook. I’m not sure I’ll miss you even the slightest bit.&lt;/p&gt;</content><author><name></name></author><summary type="html">“Our inventions are wont to be pretty toys, which distract our attention from serious things. They are but improved means to an unimproved end, an end which it was already but too easy to arrive at…” Henry David Thoreau</summary></entry><entry><title type="html">Ignorance is not a four-letter word!</title><link href="http://jolson88.com/growth/2017/09/09/ignorance-not-four-letter-word.html" rel="alternate" type="text/html" title="Ignorance is not a four-letter word!" /><published>2017-09-09T00:00:00-07:00</published><updated>2017-09-09T00:00:00-07:00</updated><id>http://jolson88.com/growth/2017/09/09/ignorance-not-four-letter-word</id><content type="html" xml:base="http://jolson88.com/growth/2017/09/09/ignorance-not-four-letter-word.html">&lt;blockquote&gt;
  &lt;p&gt;Individuals who believe their talents can be developed (through hard work, good strategies, and input from others) have a growth mindset. They tend to achieve more than those with a more fixed mindset (those who believe their talents are innate gifts). This is because they worry less about looking smart and they put more energy into learning.&lt;/p&gt;

  &lt;p&gt;Carol Dweck&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why is to so hard to admit when we’re wrong? Why can we experience a sense of guilt when making mistakes? Why do we find it hard to admit to our peers that we don’t know something?&lt;/p&gt;

&lt;p&gt;I was originally exposed to the concept of a Growth Mindset when reading the book “Mindset: The New Psychology of Success” by Carol S. Dweck, Ph.D. It came recommended to me by a former manager of mine. I quickly recognized that I suffered from a Fixed Mindset and started to realize all the ways it impacted my life, especially my career as a software developer.&lt;/p&gt;

&lt;p&gt;Lately though, I’ve been thinking through this idea in more depth and I have come to the opinion that this behavior of “worshipping at the altar of Innate Talent” contributes to so many of the limiting behaviors we are facing in our software development culture today. These behaviors tend to give people very bad experiences and ultimately disrupt our ability to connect with each other in constructive and healthy ways.&lt;/p&gt;

&lt;h1 id=&quot;is-ignorance-bliss&quot;&gt;Is Ignorance Bliss?&lt;/h1&gt;

&lt;p&gt;There is a lot of peer pressure to look smart in this industry. We want the respect of our peers. We don’t want to admit we don’t know something and then look dumb in the process. Some communities even self-identify as “the smart kids” or others talk-down to “the more simple-minded folk.” This behavior only serves to perpetuate a fixed mindset.&lt;/p&gt;

&lt;p&gt;As an inventor, Edison made 1,000 unsuccessful attempts at inventing the light bulb. When a reporter asked, “How did it feel to fail 1,000 times?” Edison replied, “&lt;strong&gt;I didn’t fail 1,000 times. The light bulb was an invention with 1,000 steps.&lt;/strong&gt;” Henry Ford, R. H. Macy, and many other business pioneers failed many times before they succeeded. But somehow we’ve ended up with the belief that Mistakes Are Bad.&lt;/p&gt;

&lt;p&gt;We might feel compelled to cover up our mistakes. We may not want the people we respect and admire to see our mistakes. “What will people think?” “Maybe the company will realize I can’t actually do this job and they’ll finally fire me.” Why? We often view making mistakes as bad because we fail to realize that making mistakes is a great way to learn. We associate making mistakes with a lack of talent. Perhaps we think “if only I were smarter, I wouldn’t be making these mistakes.”&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’ve failed over and over and over again in my life and that is why I succeed&lt;/p&gt;

  &lt;p&gt;– Michael Jordan&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thinking with a fixed mindset contributes to our insecurities having built-in defense mechanisms that serve to tear down others. It’s common in this industry to see people aggressively criticizing others or blaming others for mistakes. This is especially true the smaller or “sillier” the mistake is. Combine a silly mistake with a large negative impact and you will see plenty of finger pointing happening. It’s hard to admit that we can be one of the people pointing fingers.&lt;/p&gt;

&lt;p&gt;A problem though is that this behavior is self-defeating. Blaming others is ultimately a behavior that diminishes trust that others have in you. Avoiding taking responsibility for our own actions can also exhibit itself in a pattern of “half-truths, use spin, avoidance, and weasel words.”&lt;/p&gt;

&lt;p&gt;Remember, mistakes are not bad. Every mistake is an opportunity to learn and grow. By being honest when we make mistakes, we will start down a path of building trust with others.&lt;/p&gt;

&lt;h1 id=&quot;the-cult-of-personality&quot;&gt;The Cult of Personality&lt;/h1&gt;

&lt;p&gt;I fall victim to this… routinely. My personal development heroes are the Alan Kays, the Rich Hickeys, the Joe Armstrongs, the Erik Meijers, etc. I find myself thinking “I’ll never be as smart as them, if only I had as much talent and intellect as they do.” It’s not that they don’t offer huge swaths of knowledge you can learn from. It’s that I tend to tear myself down while admiring their knowledge. Our amount of talent is not fixed though. It will grow as we gain experience. There’s no need to be so self-critical.&lt;/p&gt;

&lt;p&gt;We can see the impact of Worshipping Talent exhibit itself in more insidious ways at technical conferences and in blog post comments too. It’s extremely easy to fall back on looking down at lesser-experienced developers sharing their own discoveries and lessons learned. Perhaps you’ve been sitting in the audience at a talk and silently wondered why &lt;em&gt;they&lt;/em&gt; are the ones giving a presentation? After all, “we want to hear from the folks that are smarter than us, that have more talent than us, the ones that we feel we can look up to”. You can even find presentations where attendees feel the need to correct the presenter or prove that they themselves know more.&lt;/p&gt;

&lt;p&gt;The belief in innate talent can also impact companies.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A company that plays the talent game makes it harder for people to practice growth-mindset thinking and behavior, such as sharing information, collaborating, innovating, seeking feedback, or admitting errors.&lt;/p&gt;

  &lt;p&gt;– Carol Dweck&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The seeking of innate talent in the job market is an area that I know I tend to fall back into a fixed mindset and need to improve. When I’m interviewing people or looking at the great team I work on, I think about how talented they are. I think about how smart they all are. And they most certainly are. But I’ve seen a lot of teams get burned by the seeking of developers with innate talent, talent they were just born with.&lt;/p&gt;

&lt;p&gt;Some companies look for the Rock Stars to hire, the people who have “freakish” amounts of talent. They get seduced by the talent. And what do companies frequently end up with? Prima donnas. People that lack empathy for others. People that are highly competitive and care more about their own accomplishments than the wake of damage they leave behind.&lt;/p&gt;

&lt;p&gt;Morale sinks. Paranoia grows. Teamwork wanes. Passion dies out. And the joy of the fun work we do in sotware is slowly but surely sucked out of the team.&lt;/p&gt;

&lt;p&gt;As I’ve progressed in my career, I’ve realized that I care most about working with people that are humble, trustworthy, and have integrity. Technology is easily learned. And technology changes frequently. Comparatively, it is much more difficult for a person to change the core of their personality and belief system.&lt;/p&gt;

&lt;h1 id=&quot;being-risk-averse&quot;&gt;Being Risk-Averse&lt;/h1&gt;

&lt;p&gt;When we are living in a culture dominated by a fixed mindset, there becomes a growing desire to look smart or to not be viewed as “dumb” as we discussed above. This impacts our career directly because we find ourselves censoring ourselves. We don’t share our experiences or lessons learned because we think others don’t care or that it won’t be useful to anybody else. After all, “What value could I possibly be providing that so many other people haven’t already provided?” We avoid the risk of being criticized, and we avoid the risk of failure.&lt;/p&gt;

&lt;p&gt;It doesn’t matter whether it’s blogging, whether it’s speaking at technical conferences, or sharing source code. It doesn’t matter if you just started programming yesterday, or if you’ve been programming for 20 years. Everybody can provide value. Be yourself and put yourself out there. Don’t worry about others. You are learning. And your own mistakes can help others learn too. And that’s A Great Thing. Don’t let perceived risks get in your way.&lt;/p&gt;

&lt;p&gt;Risk aversity crops up all the time in how companies behave as well.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Organizations that embody a growth mindset encourage appropriate risk-taking, knowing that some risks won’t work out. They reward employees for important and useful lessons learned, even if a project does not meet its original goals. They support collaboration across organizational boundaries rather than competition among employees or units.&lt;/p&gt;

  &lt;p&gt;– Carol Dweck&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It can be frustrating to work at a company that is risk-averse. Taking risks naturally involves the potential of something bad happening. When you overly focus on the potential for bad, you fail to recognize the learning that happens through risk taking, even when the bet doesn’t pan out.&lt;/p&gt;

&lt;p&gt;Similar to the risk of sharing our journey with the larger company, we can avoid sharing with our own team members as well. Being willing to admit you don’t know something is a form of risk tasking after all. But do we work at a company that actively encourages us to take these risks? Or do we suffer potential negative consequences from that action (e.g. fewer opportunities for growth due lack of perceived skill, team members having less confidence in our abilities after, lower performance reviews because we aren’t viewed as “strong/smart”, etc.)?&lt;/p&gt;

&lt;p&gt;Having a company culture that embraces a growth mindset is important. Making mistakes are a way we learn. That includes topics as scary as facing a major disruption or outage of a service. Companies with a fixed mindset view these occurences as horrendous, they are something that should be avoided at all costs. However, it is through these experiences that a company discovers the true ways their software can misbehave. It is through these lessons and growth that systems improve and evolve over time.&lt;/p&gt;

&lt;p&gt;The best way to make a more robust and reliable system is to be brave enough to find the ways the system breaks in the first place. Without this, systems remain stagnant and become more brittle over time as entropy sets in.&lt;/p&gt;

&lt;p&gt;But to prevent unwanted downtimes, or to avoid fixing the underlying problems due to the potential of risk, it is not uncommon for companies to introduce more process. Add extra steps, personal sign-offs, or some other mechanism that aims to prevent the same mistake from being possible at all costs. This is just a Band-Aid. The actual underlying flaw of the system is not being addressed. The company only aims to prevent the same flaw from being exposed in the future. AS these extra processes add up, the evolution of software slows down tremendously. It’s like building and maintaining a system with both hands tied behind your back.&lt;/p&gt;

&lt;h1 id=&quot;in-closing&quot;&gt;In Closing&lt;/h1&gt;
&lt;p&gt;So what can we do about all of this? First off, we need to be willing to take appropriate risks. We need to recognize that making mistakes provides opportunities to learn. We need to stop being hard on ourselves when we make mistakes. And we need to stop being hard on others when they make mistakes. Every mistake is a learning opportunity. You can not only learn from your own mistakes, but you can learn from others’ mistakes as well. Mistakes Are Good. They are a sign that you are stretching your abilities and growing.&lt;/p&gt;

&lt;p&gt;We need to be willing to share our journey with others. We need to not let fear get in the way. Sharing our journey and experiences will provide its own form of learning. By lurking in the shadows, forever on the sidelines of life, we are robbing ourselves of great experiences and slowing down the rate of growth we could otherwise experience. And we need to be supportive of others doing the same thing.&lt;/p&gt;

&lt;p&gt;We also need to stop defining our own self-worth by the set of knowledge we have today or how much innate talent we think we do or don’t have. By being willing to admit when we don’t know a topic, we are recognizing an area for learning. We need to acknowledge that every moment of not knowing can be a moment for learning. We can’t do this if we’re not willing to admit what we don’t know.&lt;/p&gt;

&lt;p&gt;We need to recognize that talent can be developed, that it comes from hard work and learning. We should not take away the avenues we have for making mistakes. We should not take away the avenues we have for learning from others. This will only inhibit growth in the long-run. We need to start living with a Growth Mindset and showing in actions what that means, both as individuals and as companies.&lt;/p&gt;</content><author><name></name></author><summary type="html">Individuals who believe their talents can be developed (through hard work, good strategies, and input from others) have a growth mindset. They tend to achieve more than those with a more fixed mindset (those who believe their talents are innate gifts). This is because they worry less about looking smart and they put more energy into learning. Carol Dweck</summary></entry><entry><title type="html">It’s time for makefiles to make a comeback</title><link href="http://jolson88.com/programming/2017/09/04/time-for-makefiles-to-make-a-comeback.html" rel="alternate" type="text/html" title="It's time for makefiles to make a comeback" /><published>2017-09-04T00:00:00-07:00</published><updated>2017-09-04T00:00:00-07:00</updated><id>http://jolson88.com/programming/2017/09/04/time-for-makefiles-to-make-a-comeback</id><content type="html" xml:base="http://jolson88.com/programming/2017/09/04/time-for-makefiles-to-make-a-comeback.html">&lt;p&gt;Make and makefiles are lost in the past for many developers, its advantages lost in the stream of tools that are constantly reinventing the wheel of building software. It’s time we get off that crazy carousel.&lt;/p&gt;

&lt;p&gt;If you ask many developers the first thing that comes to mind with Make and makefiles, you will likely get several answers: C/C++, native projects, huge, archaic, or perhaps even old. Some younger developers that have grown up in the JavaScript ecosystem may not have even heard of Make and don’t realize the advantages they could harvest by using an existing, well-proven, and stable tool. Do we really need to be learning a new task runner or build system every 18 months as JavaScript frameworks come and go?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Those who do not understand Unix are condemned to reinvent it, poorly.&lt;/p&gt;

  &lt;p&gt;Usenet signature, November 1987
 — Henry Spencer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;what-does-this-have-to-do-with-modern-javascript-development&quot;&gt;What does this have to do with modern JavaScript development?&lt;/h1&gt;

&lt;p&gt;It’s not uncommon for larger JavaScript-based projects today to use a language that compiles down to JavaScript, either for powerful language features or for stronger type checking. We use Browserify to package all our JavaScript modules together into a bundle to allow front-end developers to have a more composition-based developer experience through modules (like back-end developers have in Node.js). We use LESS or SASS and compile out to CSS the browser can understand. We minimize our JavaScript to make the files smaller, resulting in faster downloads and page load times.&lt;/p&gt;

&lt;p&gt;What do all these things have in common with each other? At their core, they are each about taking a set of input files and transforming them into a set of output files. And this is exactly what Make is so incredibly good at.&lt;/p&gt;

&lt;p&gt;What do makefiles do? Makefiles are simply a declarative way to transform one file (or series of files) into another. That’s it, it’s that simple. It’s not specific to C, C++, or even to programming languages. You could just as easily use a makefile to transform markdown documentation into shipped HTML files, or to pack important files into a zip/tar archive, or do a myriad of other transformations.&lt;/p&gt;

&lt;p&gt;Thanks to its declarative nature and implementation, Make is able to use makefiles to only run the bare transforms needed to reach the final destination format. If a source file hasn’t changed since the last transformation, the source file doesn’t have to be processed again. In larger projects, this is a huge win to speed and a boon to the developer experience.&lt;/p&gt;

&lt;p&gt;Make first appeared over 40 years ago and a lot of software has been built with it since that time. It’s a battle-tested and stable piece of software that excels at exactly what it was meant to do: transforming files from a source format to a target format, with a very simple and easy-to-understand mechanism for declaring dependencies. It’s all text-based, doesn’t try to solve everything itself, and has a great integration experience through calling out to shell scripts. In other words, it is very Unix-like. This is hardly surprising given it’s birth within the Unix environment.&lt;/p&gt;

&lt;p&gt;Some developers have had experiences with very complicated and convoluted makefiles in larger projects. But it doesn’t need to be that way. In fact, it can be quite simple to build an NPM package that is implemented in Typescript (from building the source code to packaging the NPM package):&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PATH :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; node_modules/.bin:&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;PATH&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

source_files    :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;wildcard lib/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.ts&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
build_files     :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;source_files:lib/%.ts&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;dist/%.js&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
PACKAGE         :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; build/my-package-1.0.0.tgz

.PHONY: all

all: &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;PACKAGE&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;build_files&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;source_files&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; package.json
    npm i
    tsc

&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;PACKAGE&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;build_files&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; .npmignore
    @mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    @cd &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm pack &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CURDIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yes, the above example was for building a very small project. But just because the project becomes larger, doesn’t mean the user experience of Make diminishes. Let’s look at an example.&lt;/p&gt;

&lt;p&gt;At work, I’m currently working on a larger project that is based on AWS Kinesis and Lambda Functions, a stream-processing system architecture that is serverless. The “service” is based out of one git repository for convenience. But we want easily accessible shared libraries between our different Lambda handlers that can also be independently deployed projects. This makes deploying fixes or new functionality into production much quicker and with much less overhead than deploying the entire service as one large monolith.&lt;/p&gt;

&lt;p&gt;Our project structure is inspired by a post by StrongLoop on creating a modular Node.js project structure. Even though we are using TypeScript, this structure still definitely applies to us. So we started with the linking and npm scripts approach outlined in the blog post.&lt;/p&gt;

&lt;p&gt;Our project structure ended up looking like this in the abstract:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- src
    |- lib
        |- foo
            |- dist
                |- *.js (compiled JavaScript files)
            |- lib
                |- *.ts
            |- package.json
            |- makefile
        |- bar
            |- package.json
            |- makefile
        |- baz
            |- package.json
            |- makefile
    |- handlers
        |- alpha (depends on foo and bar)
            |- package.json
            |- makefile
        |- omega (depends on bar and baz)
            |- package.json
            |- makefile
- package.json
- makefile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But as the number of modules grew and the different ordering of dependencies started cropping up (as they do in larger Enterprise software), this approach quickly became unwieldy and painful. We found ourselves with a whole mix of preinstall, postinstall, and prestart scripts. It was very difficult to understand what was happening at build time to bootstrap the service. And integrating new sub-projects was a pain. It was also a “build everything or nothing” type of solution without us putting in a non-trivial amount of extra work.&lt;/p&gt;

&lt;p&gt;Before grabbing the latest build hotness like Gulp off the shelf, we decided to take a look at what Make could do for this since it’s an established tool and this is right up its alley. That decision is what kicked off my growing appreciation of Make (and inspired this blog post).&lt;/p&gt;

&lt;p&gt;Being a larger and growing project, we were naturally concerned about whether our build solution would scale. I happen to think that using Make, it most definitely does. And other than the Make quirks you get used to after you first use it for a while, I think that a junior developer could integrate their own libraries into this Make process.&lt;/p&gt;

&lt;p&gt;Here’s what a potential makefile for the above project would look like:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deps_install    :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CURDIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/build/last-install-time
pkg_lib_foo     :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CURDIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/build/foo-1.0.0.tgz
pkg_lib_bar     :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CURDIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/build/bar-1.0.0.tgz
pkg_lib_baz     :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CURDIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/build/baz-1.0.0.tgz
pkg_alpha       :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CURDIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/build/alpha-1.0.0.tgz
pkg_omega       :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CURDIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/build/omega-1.0.0.tgz

.PHONY: all handlers libs

all: libs handlers

handlers: &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;deps_install&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;MAKE&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; src/handlers/alpha
    &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;MAKE&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; src/handlers/omega

libs:
    &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;MAKE&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; src/lib/foo
    &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;MAKE&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; src/lib/bar
    &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;MAKE&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; src/lib/baz

&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;deps_install&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;pkg_lib_foo&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;pkg_lib_bar&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;pkg_lib_baz&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    @if &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;pkg_lib_foo&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;findstring &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;pkg_lib_foo&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CURDIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/src/handlers/alpha &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm i &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;pkg_lib_foo&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
    @if &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;pkg_lib_bar&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;findstring &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;pkg_lib_bar&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CURDIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/src/handlers/alpha &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm i &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;pkg_lib_bar&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CURDIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/src/handlers/omega &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm i &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;pkg_lib_bar&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
    @if &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;pkg_lib_baz&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;findstring &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;pkg_lib_baz&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CURDIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/src/handlers/omega &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm i &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;pkg_lib_baz&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
    @touch &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;deps_install&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, it doesn’t need to be incredibly complicated. As this is a back-end service, we don’t have browserify, less, or minification. But it should help paint the picture that even with those additions, it should be pretty straightforward.&lt;/p&gt;

&lt;p&gt;If you make a change to the baz library, only baz is rebuilt and only baz is re-installed into the omega handler sub-project. Throw a watcher on this process (e.g. an npm script like watch ‘npm run build’ src — wait=5) and your build process becomes more rich and improves the local development experience.&lt;/p&gt;

&lt;h1 id=&quot;the-upsides&quot;&gt;The Upsides&lt;/h1&gt;

&lt;p&gt;One thing I really like about this is that things only run if they need to. You don’t even need an incremental compiler to make it possible. If source files haven’t been updated, there is no need to regenerate the target files. Make knows this by comparing the last modified times of the source files compared to the target files. You can see the easy integration into existing tools like tsc and npm. I didn’t need to wait until a wrapper was created (or to create my own wrapper) in a code-based build tool.&lt;/p&gt;

&lt;p&gt;Another less obvious benefit when comparing Make with code-based build tools like Grunt or Gulp is being declarative vs. imperative. You get to focus on the end result (declaring what needs to be done) instead of focusing on how the actual work is done.&lt;/p&gt;

&lt;p&gt;Make is also a standalone tool, so there is no need to bring in a bunch of other code dependencies like code-based task runners do. This not only makes the user experience better, but it also means there are fewer ways the software can break (e.g. a new version of a dependency that breaks functionality in the core tool).&lt;/p&gt;

&lt;h1 id=&quot;the-downsides&quot;&gt;The Downsides&lt;/h1&gt;

&lt;p&gt;Yes, it’s another tool and language that developers need to learn. But that’s what we get paid to do as developers, right? We always need to be learning new tools and techniques (or re-learning old tools and techniques in this case :P). We accept this forever-learning experience as the latest-and-greatest programming languages or software libraries roll out every month.&lt;/p&gt;

&lt;p&gt;But remember, in this case, we are learning a general tool that we will be to leverage in many different ways for a long time. Alton Brown need not worry, this tool is very much a multi-tasker. Make has been around for over 40 years and it’s not going anywhere anytime soon. Can we say the same about Grunt, Gulp, or the next Task Runner du jour?&lt;/p&gt;

&lt;p&gt;An accurate concern of using Make historically has been the lack of decent support on Windows. By leveraging Make, you were potentially making life more difficult for all your Windows users. That was a non-starter for many projects. But with the recent addition of Linux support in Windows and the ongoing change of heart under Satya Nadella’s leadership at Microsoft, this concern is hopefully a relic of the past. With all the great stuff to be learned from and used in Linux, I feel this trend is a major boon to software developers.&lt;/p&gt;

&lt;p&gt;Now is a great time to learn Make
So today is a great time to learn and start leveraging Make and makefiles. They are still very much relevant to our work today as developers. There’s no need for an ever-revolving door of task runners du jour. Don’t succumb to the build tool treadmill and burn yourself out. Learn a powerful tool you will be able to leverage for a long time and isn’t going anywhere any time soon.&lt;/p&gt;

&lt;p&gt;Yes, it’s time for Makefiles to make a comeback! Let’s do this!&lt;/p&gt;</content><author><name></name></author><summary type="html">Make and makefiles are lost in the past for many developers, its advantages lost in the stream of tools that are constantly reinventing the wheel of building software. It’s time we get off that crazy carousel.</summary></entry><entry><title type="html">I admit, I want to be a craftsman</title><link href="http://jolson88.com/personal/2015/11/08/i-want-to-be-a-craftsman.html" rel="alternate" type="text/html" title="I admit, I want to be a craftsman" /><published>2015-11-08T00:00:00-08:00</published><updated>2015-11-08T00:00:00-08:00</updated><id>http://jolson88.com/personal/2015/11/08/i-want-to-be-a-craftsman</id><content type="html" xml:base="http://jolson88.com/personal/2015/11/08/i-want-to-be-a-craftsman.html">&lt;p&gt;Developers have long discussed and debated whether programming is an art, a science, an engineering practice, or something else. I don’t believe in Blacks and Whites. I think programming means different things to different people. And programming fulfills different expectations depending on its use.&lt;/p&gt;

&lt;p&gt;Over the last ten years, I’ve taken quite the winding road as a developer. Before joining Microsoft, I was a back-end server developer using C#. I loved writing code. I loved learning how to write better code. I loved reading well written code. I loved Design Patterns, and Enterprise Application Architecture, and Test-Driven Development, and all the fancy buzzwords at the time. I blogged about these loves. I gave talks about these loves. Then several years later, I got a call that started the next phase of my career.&lt;/p&gt;

&lt;p&gt;Almost on a whim, I joined Microsoft after a recruiter contacted me about an open position. It was like being called up to the Big Leagues for me, finally called home to the Mothership. I joined Microsoft as a Technical Evangelist. I blogged and shared other people’s technologies. I was talking about the problems other people were having. I later joined Windows as a Program Manager. I worked to deliver technologies like the Windows Runtime and cool new video editing APIs. But over time, I just found myself less excited. I was at Microsoft for over nine years. Towards the end, I knew it was time for me to move on.&lt;/p&gt;

&lt;p&gt;I felt like I was rapidly losing touch with the development world I once held so dear. I saw many of the cool technologies my friends were working with and I found myself wanting to be in their shoes. i had lost my passion. I had lost my fire. That feeling of excitement about going to work in the morning? I missed that feeling.&lt;/p&gt;

&lt;p&gt;So I started interviewing at different companies. I found a couple that I was extremely excited about and absolutely loved the technologies they were using. Through the interview process, I fell in love with my current company and team at Concur. They have a great culture, a great group of individuals, and a great set of technologies that are sharpening my tools again (and hey, we’re hiring!). I had thought about interviewing at Concur ever since Howard Dierking started talking about the work he was doing here. However, I let fear prevent me from taking the leap. “I don’t want to be rejected”. “I’m comfortable here at Microsoft”. “I couldn’t possibly find a job as good as this”. “I should be happy here, I’m lucky”. All the usual suspects. I finally did take the leap though, and I couldn’t be happier with my decision.&lt;/p&gt;

&lt;p&gt;Do I regret my time at Microsoft? Not at all. I enjoyed most of my time there. I worked with many great people (too many people to list here). I learned a lot from the many managers and coworkers I had over the years. I had many great experiences like talking at the //build conference and seeing how large-scale software is made and shipped. Now that I’m getting my dev legs back under me, I feel like everything I learned during my time at Microsoft has made me a better developer. Being a Program Manager taught me to think critically about technology and to focus on the things that actually provide value. The many different projects gave me a well-rounded software education which I will always be thankful for.&lt;/p&gt;

&lt;p&gt;Here’s the thing though… I want to be a Craftsman. I need to be creating. I need to be getting my hands dirty. I’m inspired by documentaries like &lt;a href=&quot;http://www.magpictures.com/jirodreamsofsushi/&quot;&gt;Jiro Dreams of Sushi&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=7708E1bmoxc&quot;&gt;Building Without Nails&lt;/a&gt;, &lt;a href=&quot;http://designisonefilm.com/&quot;&gt;Design Is One&lt;/a&gt;, and &lt;a href=&quot;http://www.hustwit.com/category/helvetica/&quot;&gt;Helvetica&lt;/a&gt;. I’m inspired by developers that use Vim or Emacs and can craft their own customized development environment; I love Tim Ewald’s talk on Clojure: &lt;a href=&quot;https://www.youtube.com/watch?v=ShEez0JkOFw&quot;&gt;Programming with Hand Tools&lt;/a&gt;. I love “craftsman” programming languages like LISP/Scheme, Clojure, Smalltalk, Self, etc. The things people do with creative coding frameworks like Processing, or Cinder, or Open Frameworks absolute amaze me. gmunk’s work on the &lt;a href=&quot;http://www.gmunk.com/OBLIVION-GFX&quot;&gt;interfaces in the movie Oblivion&lt;/a&gt;? Jaw-dropping (bonus: I discovered he did the graphics for my favorite desktop wallpaper in Windows 10!).&lt;/p&gt;

&lt;p&gt;I suppose it goes without saying that I’ve consumed a lot of Robert C. Martin Kool-Aid over the years! And deep thinkers like Rich Hickey, Guy Steele, or Bret Victor.&lt;/p&gt;

&lt;p&gt;I want to touch other people’s lives. I want to share my love for writing code again. I want to be a Code Craftsman other people look up to. For others that want to be hackers, or engineers, or scientists, that’s cool. But it’s not me.&lt;/p&gt;

&lt;p&gt;One thing is for sure: it’s GREAT to be back! It’s great to have started the next phase of my career. And I can’t wait to see the stuff I’ll be a part of in the years to come.&lt;/p&gt;</content><author><name></name></author><summary type="html">Developers have long discussed and debated whether programming is an art, a science, an engineering practice, or something else. I don’t believe in Blacks and Whites. I think programming means different things to different people. And programming fulfills different expectations depending on its use.</summary></entry></feed>